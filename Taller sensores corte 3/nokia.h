//Por Santiago Montenegro Y Juan Manuel Aldana
int ejex=0,ejey=0;
const unsigned char ascii[] = {
        0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char  
        0x00, 0x00, 0x4F, 0x00, 0x00,      // Code for char !
        0x00, 0x07, 0x00, 0x07, 0x00,      // Code for char "
        0x14, 0x7F, 0x14, 0x7F, 0x14,      // Code for char #
        0x24, 0x2A, 0x7F, 0x2A, 0x12,      // Code for char $
        0x23, 0x13, 0x08, 0x64, 0x62,      // Code for char %
        0x36, 0x49, 0x56, 0x20, 0x58,      // Code for char &
        0x00, 0x05, 0x03, 0x00, 0x00,      // Code for char '
        0x00, 0x1C, 0x22, 0x41, 0x00,      // Code for char (
        0x00, 0x41, 0x22, 0x1C, 0x00,      // Code for char )
        0x22, 0x14, 0x7F, 0x14, 0x22,      // Code for char *
        0x08, 0x08, 0x3E, 0x08, 0x08,      // Code for char +
        0x00, 0x00, 0x50, 0x30, 0x00,      // Code for char ,
        0x08, 0x08, 0x08, 0x08, 0x08,      // Code for char -
        0x00, 0x60, 0x60, 0x00, 0x00,      // Code for char .
        0x20, 0x10, 0x08, 0x04, 0x02,      // Code for char /
        0x3E, 0x51, 0x49, 0x45, 0x3E,      // Code for char 0
        0x00, 0x42, 0x7F, 0x40, 0x00,      // Code for char 1
        0x42, 0x61, 0x51, 0x49, 0x46,      // Code for char 2
        0x21, 0x41, 0x45, 0x4B, 0x31,      // Code for char 3
        0x18, 0x14, 0x12, 0x7F, 0x10,      // Code for char 4
        0x27, 0x45, 0x45, 0x45, 0x39,      // Code for char 5
        0x3C, 0x4A, 0x49, 0x49, 0x30,      // Code for char 6
        0x01, 0x01, 0x71, 0x0D, 0x03,      // Code for char 7
        0x36, 0x49, 0x49, 0x49, 0x36,      // Code for char 8
        0x06, 0x49, 0x49, 0x29, 0x1E,      // Code for char 9
        0x00, 0x6C, 0x6C, 0x00, 0x00,      // Code for char :
        0x00, 0x56, 0x36, 0x00, 0x00,      // Code for char ;
        0x08, 0x14, 0x22, 0x41, 0x00,      // Code for char <
        0x14, 0x14, 0x14, 0x14, 0x14,      // Code for char =
        0x00, 0x41, 0x22, 0x14, 0x08,      // Code for char >
        0x02, 0x01, 0x51, 0x09, 0x06,      // Code for char ?
        0x3E, 0x41, 0x5D, 0x55, 0x1E,      // Code for char @
        0x7C, 0x12, 0x11, 0x12, 0x7C,      // Code for char A
        0x7F, 0x49, 0x49, 0x49, 0x36,      // Code for char B
        0x3E, 0x41, 0x41, 0x41, 0x22,      // Code for char C
        0x7F, 0x41, 0x41, 0x22, 0x1C,      // Code for char D
        0x7F, 0x49, 0x49, 0x49, 0x41,      // Code for char E
        0x7F, 0x09, 0x09, 0x09, 0x01,      // Code for char F
        0x3E, 0x41, 0x49, 0x49, 0x7A,      // Code for char G
        0x7F, 0x08, 0x08, 0x08, 0x7F,      // Code for char H
        0x00, 0x41, 0x7F, 0x41, 0x00,      // Code for char I
        0x20, 0x40, 0x41, 0x3F, 0x01,      // Code for char J
        0x7F, 0x08, 0x14, 0x22, 0x41,      // Code for char K
        0x7F, 0x40, 0x40, 0x40, 0x40,      // Code for char L
        0x7F, 0x02, 0x0C, 0x02, 0x7F,      // Code for char M
        0x7F, 0x04, 0x08, 0x10, 0x7F,      // Code for char N
        0x3E, 0x41, 0x41, 0x41, 0x3E,      // Code for char O
        0x7F, 0x09, 0x09, 0x09, 0x06,      // Code for char P
        0x3E, 0x41, 0x51, 0x21, 0x5E,      // Code for char Q
        0x7F, 0x09, 0x19, 0x29, 0x46,      // Code for char R
        0x26, 0x49, 0x49, 0x49, 0x32,      // Code for char S
        0x01, 0x01, 0x7F, 0x01, 0x01,      // Code for char T
        0x3F, 0x40, 0x40, 0x40, 0x3F,      // Code for char U
        0x1F, 0x20, 0x40, 0x20, 0x1F,      // Code for char V
        0x3F, 0x40, 0x38, 0x40, 0x3F,      // Code for char W
        0x63, 0x14, 0x08, 0x14, 0x63,      // Code for char X
        0x03, 0x04, 0x78, 0x04, 0x03,      // Code for char Y
        0x61, 0x51, 0x49, 0x45, 0x43,      // Code for char Z
        0x00, 0x7F, 0x41, 0x41, 0x00,      // Code for char [
        0x02, 0x04, 0x08, 0x10, 0x20,      // Code for char BackSlash
        0x00, 0x41, 0x41, 0x7F, 0x00,      // Code for char ]
        0x04, 0x02, 0x01, 0x02, 0x04,      // Code for char ^
        0x40, 0x40, 0x40, 0x40, 0x40,      // Code for char _
        0x00, 0x00, 0x03, 0x05, 0x00,      // Code for char `
        0x20, 0x54, 0x54, 0x54, 0x78,      // Code for char a
        0x7F, 0x48, 0x44, 0x44, 0x38,      // Code for char b
        0x38, 0x44, 0x44, 0x44, 0x44,      // Code for char c
        0x38, 0x44, 0x44, 0x48, 0x7F,      // Code for char d
        0x38, 0x54, 0x54, 0x54, 0x18,      // Code for char e
        0x04, 0x04, 0x7E, 0x05, 0x05,      // Code for char f
        0x08, 0x54, 0x54, 0x54, 0x3C,      // Code for char g
        0x7F, 0x08, 0x04, 0x04, 0x78,      // Code for char h
        0x00, 0x44, 0x7D, 0x40, 0x00,      // Code for char i
        0x20, 0x40, 0x44, 0x3D, 0x00,      // Code for char j
        0x00, 0x7F, 0x10, 0x28, 0x44,      // Code for char k
        0x00, 0x41, 0x7F, 0x40, 0x00,      // Code for char l
        0x7C, 0x04, 0x78, 0x04, 0x78,      // Code for char m
        0x7C, 0x08, 0x04, 0x04, 0x78,      // Code for char n
        0x38, 0x44, 0x44, 0x44, 0x38,      // Code for char o
        0x7C, 0x14, 0x14, 0x14, 0x08,      // Code for char p
        0x08, 0x14, 0x14, 0x14, 0x7C,      // Code for char q
        0x00, 0x7C, 0x08, 0x04, 0x04,      // Code for char r
        0x48, 0x54, 0x54, 0x54, 0x20,      // Code for char s
        0x04, 0x04, 0x3F, 0x44, 0x44,      // Code for char t
        0x3C, 0x40, 0x40, 0x20, 0x7C,      // Code for char u
        0x1C, 0x20, 0x40, 0x20, 0x1C,      // Code for char v
        0x3C, 0x40, 0x30, 0x40, 0x3C,      // Code for char w
        0x44, 0x28, 0x10, 0x28, 0x44,      // Code for char x
        0x0C, 0x50, 0x50, 0x50, 0x3C,      // Code for char y
        0x44, 0x64, 0x54, 0x4C, 0x44,      // Code for char z
        0x00, 0x08, 0x36, 0x41, 0x41,      // Code for char {
        0x00, 0x00, 0x7F, 0x00, 0x00,      // Code for char |
        0x41, 0x41, 0x36, 0x08, 0x00,      // Code for char }
        0x02, 0x01, 0x02, 0x04, 0x02,      // Code for char ~
        0x60, 0x58, 0x46, 0x58, 0x60       // Code for char 
        };
char Pantalla[504]={ // Mapa de bits
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 
};  
void Print(const char *t,int l){
 unsigned char n=0; // Contador n
  // Bucle para imprimir hasta encontrar el carácter Nulo     
 while(t[n]!=0)
 {
	 for(int j=0;j<5;j++){
	 
	 Pantalla[j+6*n+(l-1)*84]=ascii[(((t[n]-32)*5)+j)];
	 }
	 n++;
 }
}
void Grafica(int val){
	val=val/2.5;
	if(val<8){ejey=432;}else{
	if(val<16){ejey=348;val=val-8;}else{
	if(val<24){ejey=263;val=val-16;}else{
	if(val<32){ejey=180;val=val-24;}else{
	if(val<40){ejey=96;val=val-32;}}}}}
	
	switch(val){
		case 8:val=0x1;
		break;
		case 7:val=0x2;
		break;
		case 6:val=0x4;
		break;
		case 5:val=0x8;
		break;
		case 4:val=0x10;
		break;
		case 3:val=0x20;
		break;
		case 2:val=0x40;
		break;
		case 1:val=0x80;
		break;
		default:
			val=0x0;
		break;
	}
		
	
	Pantalla[ejex+ejey]=val;
	ejex++;
	if(ejex==72){
		ejex=0;
		for(int X=0;X<504;X++)Pantalla[X]=0x0;
	}
}